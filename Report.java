/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package bip;
import java.awt.BorderLayout;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jesus
 */
public class Report extends javax.swing.JInternalFrame {
     
    static void setDatesText(String Date) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    static void setTripsText(String tripText) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * Creates new form student
     */
    int Totalbus = 0;
    int reportIter=0;
    Connection con;
    DBConnect dbc= new DBConnect();
    public Report() {
        initComponents();
                initComponents();
         try {
            con=dbc.Connect();
        } catch (SQLException ex) {
            Object e = null;
            JOptionPane.showMessageDialog(null,e);
        }
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI ui=(BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        removebuserror = new javax.swing.JLabel();
        updatebuserror = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reporttable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Stops = new javax.swing.JLabel();
        driver = new javax.swing.JLabel();
        conductor = new javax.swing.JLabel();
        reportmsg = new javax.swing.JLabel();
        busid = new javax.swing.JLabel();
        morningyes = new javax.swing.JRadioButton();
        eve1yes = new javax.swing.JRadioButton();
        eve2yes = new javax.swing.JRadioButton();
        generate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        repmsg = new javax.swing.JLabel();
        Driver = new javax.swing.JLabel();
        Conductor = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        backnextmsg = new javax.swing.JLabel();
        next = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Busno = new javax.swing.JLabel();
        Busid = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stops = new javax.swing.JTextArea();
        nextback = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 0));

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REPORT");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(414, 414, 414)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        back.setBackground(new java.awt.Color(102, 102, 102));
        back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        removebuserror.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removebuserror.setForeground(new java.awt.Color(255, 0, 0));

        updatebuserror.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updatebuserror.setForeground(new java.awt.Color(255, 0, 0));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("TRIP :");

        reporttable.setBackground(new java.awt.Color(204, 204, 204));
        reporttable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        reporttable.setForeground(new java.awt.Color(102, 102, 102));
        reporttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ADMIN NO", "STUDENT NAME"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        reporttable.setGridColor(new java.awt.Color(153, 153, 153));
        reporttable.setRowHeight(25);
        reporttable.setSelectionBackground(new java.awt.Color(102, 153, 255));
        jScrollPane1.setViewportView(reporttable);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("DRIVER:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("STOPS:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("CONDUCTOR:");

        Stops.setBackground(new java.awt.Color(255, 255, 255));
        Stops.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Stops.setForeground(new java.awt.Color(102, 153, 255));

        driver.setBackground(new java.awt.Color(255, 255, 255));
        driver.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        driver.setForeground(new java.awt.Color(102, 153, 255));

        conductor.setBackground(new java.awt.Color(255, 255, 255));
        conductor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        conductor.setForeground(new java.awt.Color(102, 153, 255));

        reportmsg.setBackground(new java.awt.Color(255, 255, 255));
        reportmsg.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        reportmsg.setForeground(new java.awt.Color(255, 102, 102));

        busid.setBackground(new java.awt.Color(255, 255, 255));
        busid.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        busid.setForeground(new java.awt.Color(102, 153, 255));

        buttonGroup1.add(morningyes);
        morningyes.setForeground(new java.awt.Color(51, 51, 51));
        morningyes.setText("MORNING");
        morningyes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                morningyesActionPerformed(evt);
            }
        });

        buttonGroup1.add(eve1yes);
        eve1yes.setForeground(new java.awt.Color(51, 51, 51));
        eve1yes.setText("EVENING 1");
        eve1yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eve1yesActionPerformed(evt);
            }
        });

        buttonGroup1.add(eve2yes);
        eve2yes.setForeground(new java.awt.Color(51, 51, 51));
        eve2yes.setText("EVENING 2");
        eve2yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eve2yesActionPerformed(evt);
            }
        });

        generate.setBackground(new java.awt.Color(102, 153, 255));
        generate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        generate.setForeground(new java.awt.Color(255, 255, 255));
        generate.setText("GENERATE");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        repmsg.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        repmsg.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(repmsg, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(189, 189, 189))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(repmsg, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
        );

        Driver.setBackground(new java.awt.Color(255, 255, 255));
        Driver.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Driver.setForeground(new java.awt.Color(102, 102, 102));

        Conductor.setBackground(new java.awt.Color(255, 255, 255));
        Conductor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Conductor.setForeground(new java.awt.Color(102, 102, 102));

        backnextmsg.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backnextmsg.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(backnextmsg, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backnextmsg, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addContainerGap())
        );

        next.setBackground(new java.awt.Color(102, 102, 102));
        next.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        next.setForeground(new java.awt.Color(255, 255, 255));
        next.setText("NEXT");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("BUS ID:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("BUS NUMBER:");

        Busno.setBackground(new java.awt.Color(255, 255, 255));
        Busno.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Busno.setForeground(new java.awt.Color(102, 102, 102));

        Busid.setBackground(new java.awt.Color(255, 255, 255));
        Busid.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Busid.setForeground(new java.awt.Color(102, 102, 102));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        stops.setColumns(20);
        stops.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        stops.setForeground(new java.awt.Color(102, 102, 102));
        stops.setRows(5);
        stops.setToolTipText("");
        jScrollPane2.setViewportView(stops);

        nextback.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        nextback.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(330, 330, 330)
                                        .addComponent(conductor))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(244, 244, 244)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(removebuserror, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(387, 387, 387)
                                        .addComponent(updatebuserror, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Busno, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Busid, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(28, 28, 28)
                                .addComponent(reportmsg, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(back)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(108, 108, 108)
                                                .addComponent(Stops, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(next)
                                                .addGap(38, 38, 38)
                                                .addComponent(nextback, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(133, 133, 133)
                                        .addComponent(driver, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(Conductor, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(Driver, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(171, 171, 171)
                                                .addComponent(busid))
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(74, 74, 74)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(287, 287, 287)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(morningyes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eve1yes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eve2yes)
                .addGap(53, 53, 53)
                .addComponent(generate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(morningyes)
                    .addComponent(eve1yes)
                    .addComponent(eve2yes)
                    .addComponent(generate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reportmsg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Busid, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(Busno, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Driver, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Conductor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(busid, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nextback, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22)
                                        .addComponent(Stops, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(34, 34, 34)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(updatebuserror, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removebuserror, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(driver, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(conductor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        reportIter--;
        if(reportIter<0){
            nextback.setText("This is first bus data!!!");
            reportIter++;
        }
        else{
            nextback.setText("");
            generate.doClick();
        }
    }//GEN-LAST:event_backActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
            try {
        // Increment reportIter
        ++reportIter;

        // Check if reportIter is greater than or equal to Totalbus
        if(reportIter == (--Totalbus)) {
            nextback.setText("This is last bus data!!!");

            // Optionally, you can reset reportIter to Totalbus - 1
            --reportIter;
        } else {
            // Clear the message and trigger the "generate" action
            nextback.setText("");
            generate.doClick();
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        // Handle the exception here, e.g., display an error message
        nextback.setText("This is last bus data!!!");
    }
    }//GEN-LAST:event_nextActionPerformed

    private void morningyesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_morningyesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_morningyesActionPerformed

    private void eve1yesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eve1yesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eve1yesActionPerformed

    private void eve2yesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eve2yesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eve2yesActionPerformed

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
    int[] capacity = new int[20];
    String[] stop = new String[]{"BUSSTAND", "SASSINAGAR", "VEMBAKOTTAICORNER", "SATCHIYAPURAM", "KAMARAJARSILAI", "MANINAGAR", "CHEMICALSTOP"};
    int[] stopcount = new int[7];
    int i = 0;
    int buscount = 0;
    int[] busid = null;
    stops.setText("");
    repmsg.setText("");

    // Initialize a HashSet to store unique allocated bus IDs
    Set<Integer> allocatedBusIds = new HashSet<>();

    try {
        String sql1 = "TRUNCATE TABLE REPORT";
        PreparedStatement pstmt1 = null;
        pstmt1 = con.prepareStatement(sql1);
        pstmt1.executeUpdate();
        Statement statement = con.createStatement();
        String capacityQuery = "SELECT capacity FROM bus WHERE Availability=1";
        ResultSet capacityResultSet = statement.executeQuery(capacityQuery);

        while (capacityResultSet.next()) {
            capacity[i] = capacityResultSet.getInt("capacity");
            i++;
        }
        capacityResultSet.close();

        if (morningyes.isSelected() || eve1yes.isSelected() || eve2yes.isSelected()) {
            Statement stopStatement = con.createStatement();

            for (i = 0; i < 7; i++) {
                String stopCountQuery = "";
                if (morningyes.isSelected()) {
                    // Query to retrieve student count at each stop for morning
                    stopCountQuery = "SELECT COUNT(name) AS student_count FROM Student WHERE available=1 AND Deisgnation='" + stop[i] + "'";
                } else if (eve1yes.isSelected()) {
                    // Query to retrieve student count at each stop for evening trip 1
                    stopCountQuery = "SELECT COUNT(name) AS student_count FROM Student WHERE available=1 AND TRIP2='NO' AND Deisgnation='" + stop[i] + "'";
                } else if (eve2yes.isSelected()) {
                    // Query to retrieve student count at each stop for evening trip 2
                    stopCountQuery = "SELECT COUNT(name) AS student_count FROM Student WHERE available=1 AND TRIP2='YES' AND Deisgnation='" + stop[i] + "'";
                }

                ResultSet studentCountResultSet = stopStatement.executeQuery(stopCountQuery);

                if (studentCountResultSet.next()) {
                    stopcount[i] = studentCountResultSet.getInt("student_count");
                }
                studentCountResultSet.close();
            }
            stopStatement.close();

            Statement busStatement = con.createStatement();
            String BuscountQuery = "SELECT count(bus_id) as buscount FROM bus WHERE Availability=1";
            ResultSet BuscountResultSet = busStatement.executeQuery(BuscountQuery);

            if (BuscountResultSet.next()) {
                buscount = BuscountResultSet.getInt("buscount");
            }
            BuscountResultSet.close();

            String[] drivername = new String[20];
            String[] conductorname = new String[20];

            // Fetch driver names
            Statement driverStatement = con.createStatement();
            String driverQuery = " SELECT name FROM worker where designation=\"driver\" and availability=1;";
            ResultSet DriverResultSet = driverStatement.executeQuery(driverQuery);
            int driverIndex = 0;
            while (DriverResultSet.next()) {
                drivername[driverIndex] = DriverResultSet.getString("name");
                driverIndex++;
            }
            DriverResultSet.close();

            // Fetch conductor names
            Statement conductorStatement = con.createStatement();
            String conductorQuery = " SELECT name FROM worker where designation=\"conductor\" and availability=1;";
            ResultSet ConductorResultSet = conductorStatement.executeQuery(conductorQuery);
            int conductorIndex = 0;
            while (ConductorResultSet.next()) {
                conductorname[conductorIndex] = ConductorResultSet.getString("name");
                conductorIndex++;
            }
            ConductorResultSet.close();

            // Create arrays to store driver and conductor assignments for each bus
            String[] assignedDrivers = new String[buscount];
            String[] assignedConductors = new String[buscount];

            // Allocate drivers and conductors to buses
            driverIndex = 0;
            conductorIndex = 0;

            for (i = 0; i < 7; i++) {
                int studentsToAllocate = stopcount[i];

                while (studentsToAllocate > 0) {
                    int bestFitBusIndex = -1;
                    int bestFitCapacityDifference = Integer.MAX_VALUE;

                    for (int j = 0; j < buscount; j++) {
                        int remainingCapacity = capacity[j];

                        if (remainingCapacity >= studentsToAllocate && remainingCapacity - studentsToAllocate < bestFitCapacityDifference) {
                            bestFitBusIndex = j;
                            bestFitCapacityDifference = remainingCapacity - studentsToAllocate;
                        }
                    }
                    if (bestFitBusIndex != -1) {
                        // Assign students to the best fit bus and update counts
                        capacity[bestFitBusIndex] -= studentsToAllocate;
                        studentsToAllocate = 0;

                        // Assign a driver and conductor to the bus if available and not assigned for this stop
                        if (driverIndex < drivername.length && conductorIndex < conductorname.length
                                && assignedDrivers[bestFitBusIndex] == null && assignedConductors[bestFitBusIndex] == null) {
                            assignedDrivers[bestFitBusIndex] = drivername[driverIndex];
                            assignedConductors[bestFitBusIndex] = conductorname[conductorIndex];
                            driverIndex++;
                            conductorIndex++;
                        }

                        // Display bus number, student count, stop name, driver, and conductor in a dialog box
                        String message = "Bus " + (bestFitBusIndex + 1) + " allocated students from " + stop[i];
                        if (assignedDrivers[bestFitBusIndex] != null && assignedConductors[bestFitBusIndex] != null) {
                            message += "\nDriver: " + assignedDrivers[bestFitBusIndex] + ", Conductor: " + assignedConductors[bestFitBusIndex];
                        }
                        //JOptionPane.showMessageDialog(null, message);
                        
                        // Store the allocated bus ID in the set if it hasn't been stored already
                        allocatedBusIds.add(bestFitBusIndex + 1);
                        String sql = "INSERT INTO REPORT (busid,driver,conductor,stop) VALUES (?, ?, ?, ?)";
                        // Create a PreparedStatement and initialize it outside of try-catch.
                        PreparedStatement pstmt = null;
                        // Prepare the PreparedStatement with the SQL query.
                        pstmt = con.prepareStatement(sql);
                        // Set the values for the placeholders in the SQL query.
                        pstmt.setInt(1, bestFitBusIndex + 1);
                        pstmt.setString(2, assignedDrivers[bestFitBusIndex]);
                        pstmt.setString(3, assignedConductors[bestFitBusIndex]);
                        pstmt.setString(4, stop[i]);
                        pstmt.executeUpdate();
                    } else {
                        // No bus can accommodate the remaining students
                        // Handle this case as needed
                        studentsToAllocate = 0;
                    }
                }
            }
        }

    } catch (SQLException ex) {
        Logger.getLogger(Report.class.getName()).log(Level.SEVERE, null, ex);
    }

    // Calculate the total number of allocated buses
    int Totalbus = allocatedBusIds.size();

    // Convert the set of allocated bus IDs to an array
    busid = allocatedBusIds.stream().mapToInt(Integer::intValue).toArray();
    // Display bus information based on the allocated bus IDs
    String busnumber = null, drivername = null, conductorname = null;
    String[] busstop = new String[10];
    StringBuilder stopsText = new StringBuilder();
    try {
    // Set Busid text
    Busid.setText(Integer.toString(busid[reportIter]));

    // Retrieve bus_number
    String busnoquery = "SELECT bus_number FROM bus WHERE Bus_id=?";
    PreparedStatement busnoStatement = con.prepareStatement(busnoquery);
    busnoStatement.setInt(1, busid[reportIter]); // Set the parameter value
    ResultSet busnoresultSet = busnoStatement.executeQuery();

    if (busnoresultSet.next()) {
        busnumber = busnoresultSet.getString("bus_number");
        Busno.setText(busnumber);
    }
    busnoresultSet.close();
    busnoStatement.close();

    // Retrieve driver name
    String driverquery = "SELECT driver as name FROM report WHERE busid=?";
    PreparedStatement driverStatement = con.prepareStatement(driverquery);
    driverStatement.setInt(1, busid[reportIter]); // Set the parameter value
    ResultSet driverresultSet = driverStatement.executeQuery();

    if (driverresultSet.next()) {
        drivername = driverresultSet.getString("name");
        Driver.setText(drivername);
    }
    driverresultSet.close();
    driverStatement.close();

    // Retrieve conductor name
    String conductorquery = "SELECT conductor as name FROM report WHERE busid=?";
    PreparedStatement conductorStatement = con.prepareStatement(conductorquery);
    conductorStatement.setInt(1, busid[reportIter]); // Set the parameter value
    ResultSet conductorresultSet = conductorStatement.executeQuery();

    if (conductorresultSet.next()) {
        conductorname = conductorresultSet.getString("name");
        Conductor.setText(conductorname);
    }
    conductorresultSet.close();
    conductorStatement.close();

    // Retrieve bus stops
    String stopQuery = "SELECT stop FROM report WHERE busid=?";
    PreparedStatement stopStatement = con.prepareStatement(stopQuery);
    stopStatement.setInt(1, busid[reportIter]); // Set the parameter value
    ResultSet stopResultSet = stopStatement.executeQuery();
    int driverIndex = 0;
    stops.setEditable(false);

// Create a JScrollPane without scroll bars
    while (stopResultSet.next()){
        busstop[driverIndex] = stopResultSet.getString("stop");
        stops.append(busstop[driverIndex]+"\n");
        driverIndex++;
    }
    stopResultSet.close();
        // Construct the base SQL query without any filters.
        
    StringBuilder sql = new StringBuilder("SELECT adminno,name FROM Student WHERE ");
    sql.append(String.join(" OR "," DEISGNATION = \""+busstop[0])+"\"");
    for(i=1;i<driverIndex;i++)
    {
        sql.append(String.join(" OR "," OR "));
        sql.append(String.join(" OR "," DEISGNATION = \""+busstop[i])+"\"");
    }
    sql.append(String.join(" ",";"));
    
        PreparedStatement pst = con.prepareStatement(sql.toString());
        ResultSet rs = pst.executeQuery();
        DefaultTableModel model = (DefaultTableModel)reporttable.getModel();
        model.setRowCount(0); // Clear the existing table rows.
        while (rs.next()) {
            // Retrieve data from the ResultSet and add it to the table model.
            model.addRow(new String[]{
                rs.getString(1),
                rs.getString(2), 
            });
        }
        pst.close();
     System.out.println(sql);
    }
    catch (SQLException e) {
        e.printStackTrace();
    }
    
    }//GEN-LAST:event_generateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Busid;
    private javax.swing.JLabel Busno;
    private javax.swing.JLabel Conductor;
    private javax.swing.JLabel Driver;
    private javax.swing.JLabel Stops;
    private javax.swing.JButton back;
    private javax.swing.JLabel backnextmsg;
    private javax.swing.JLabel busid;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel conductor;
    private javax.swing.JLabel driver;
    private javax.swing.JRadioButton eve1yes;
    private javax.swing.JRadioButton eve2yes;
    private javax.swing.JButton generate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton morningyes;
    private javax.swing.JButton next;
    private javax.swing.JLabel nextback;
    private javax.swing.JLabel removebuserror;
    private javax.swing.JLabel repmsg;
    private javax.swing.JLabel reportmsg;
    private javax.swing.JTable reporttable;
    private javax.swing.JTextArea stops;
    private javax.swing.JLabel updatebuserror;
    // End of variables declaration//GEN-END:variables
}
